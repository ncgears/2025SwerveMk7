package frc.robot.constants;

import static edu.wpi.first.units.Units.*;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.CurrentLimitsConfigs;
import com.ctre.phoenix6.configs.MagnetSensorConfigs;
import com.ctre.phoenix6.configs.Pigeon2Configuration;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.signals.SensorDirectionValue;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;

import edu.wpi.first.units.measure.*;
import frc.robot.subsystems.CommandSwerveDrivetrain;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private static final Slot0Configs steerGains = new Slot0Configs()
        .withKP(SwerveConstants.steer.kP).withKI(SwerveConstants.steer.kI).withKD(SwerveConstants.steer.kD)
        .withKS(SwerveConstants.steer.kS).withKV(SwerveConstants.steer.kV).withKA(SwerveConstants.steer.kA);
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private static final Slot0Configs driveGains = new Slot0Configs()
        .withKP(SwerveConstants.drive.kP).withKI(SwerveConstants.drive.kI).withKD(SwerveConstants.drive.kD)
        .withKS(SwerveConstants.drive.kS).withKV(SwerveConstants.drive.kV);

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private static final ClosedLoopOutputType kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private static final ClosedLoopOutputType kDriveClosedLoopOutput = ClosedLoopOutputType.Voltage;

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
    private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private static final Current kSlipCurrent = Amps.of(SwerveConstants.drive.kSlipCurrent);

    // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private static final TalonFXConfiguration driveInitialConfigs = new TalonFXConfiguration();
    private static final TalonFXConfiguration steerInitialConfigs = new TalonFXConfiguration()
        .withCurrentLimits(
            new CurrentLimitsConfigs()
                // Swerve azimuth does not require much torque output, so we can set a relatively low
                // stator current limit to help avoid brownouts without impacting performance.
                .withStatorCurrentLimit(Amps.of(SwerveConstants.steer.kStatorCurrentLimit))
                .withStatorCurrentLimitEnable(true)
        );

    // NCSwerve Mk7 has the encoder inverted from the azimuth so we need to adjust the initial configs
    private static final CANcoderConfiguration cancoderInitialConfigs = new CANcoderConfiguration()
        .withMagnetSensor(
            new MagnetSensorConfigs()
            .withSensorDirection(SensorDirectionValue.Clockwise_Positive)
        );
    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private static final Pigeon2Configuration pigeonConfigs = null;

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    public static final LinearVelocity kSpeedAt12Volts = MetersPerSecond.of(SwerveConstants.kMaxSpeedMetersPerSecond);

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private static final double kCoupleRatio = 0;

    private static final double kDriveGearRatio = SwerveConstants.drive.kGearRatio;
    private static final double kSteerGearRatio = SwerveConstants.steer.kGearRatio;
    private static final Distance kWheelRadius = Inches.of(SwerveConstants.kWheelDiamInches);

    private static final boolean kInvertLeftSide = false;
    private static final boolean kInvertRightSide = true;

    private static final CANBus kCANBus = new CANBus(SwerveConstants.kCANbus, "./logs/example.hoot");
    private static final int kPigeonId = 0;


    // These are only used for simulation
    private static final double kSteerInertia = 0.00001;
    private static final double kDriveInertia = 0.001;
    // Simulated voltage necessary to overcome friction
    private static final Voltage kSteerFrictionVoltage = Volts.of(0.25);
    private static final Voltage kDriveFrictionVoltage = Volts.of(0.25);

    public static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
            .withCANBusName(kCANBus.getName())
            .withPigeon2Id(kPigeonId)
            .withPigeon2Configs(pigeonConfigs);

    private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadius)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrent)
            .withSpeedAt12Volts(kSpeedAt12Volts)
            .withFeedbackSource(kSteerFeedbackType)
            .withDriveMotorInitialConfigs(driveInitialConfigs)
            .withSteerMotorInitialConfigs(steerInitialConfigs)
            .withCANcoderInitialConfigs(cancoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage);


    // Front Left
    private static final int kFrontLeftDriveMotorId = SwerveConstants.modules.FrontLeft.kDriveMotorId;
    private static final int kFrontLeftSteerMotorId = SwerveConstants.modules.FrontLeft.kSteerMotorId;
    private static final int kFrontLeftEncoderId = SwerveConstants.modules.FrontLeft.kEncoderId;
    private static final Angle kFrontLeftEncoderOffset = SwerveConstants.modules.FrontLeft.kEncoderOffset;
    private static final boolean kFrontLeftSteerMotorInverted = SwerveConstants.modules.FrontLeft.kSteerMotorInverted;
    private static final Distance kFrontLeftXPos = SwerveConstants.modules.FrontLeft.kXPos;
    private static final Distance kFrontLeftYPos = SwerveConstants.modules.FrontLeft.kYPos;

    // Front Right
    private static final int kFrontRightDriveMotorId = SwerveConstants.modules.FrontRight.kDriveMotorId;
    private static final int kFrontRightSteerMotorId = SwerveConstants.modules.FrontRight.kSteerMotorId;
    private static final int kFrontRightEncoderId = SwerveConstants.modules.FrontRight.kEncoderId;
    private static final Angle kFrontRightEncoderOffset = SwerveConstants.modules.FrontRight.kEncoderOffset;
    private static final boolean kFrontRightSteerMotorInverted = SwerveConstants.modules.FrontRight.kSteerMotorInverted;
    private static final Distance kFrontRightXPos = SwerveConstants.modules.FrontRight.kXPos;
    private static final Distance kFrontRightYPos = SwerveConstants.modules.FrontRight.kYPos;

    // Back Left
    private static final int kBackLeftDriveMotorId = SwerveConstants.modules.BackLeft.kDriveMotorId;
    private static final int kBackLeftSteerMotorId = SwerveConstants.modules.BackLeft.kSteerMotorId;
    private static final int kBackLeftEncoderId = SwerveConstants.modules.BackLeft.kEncoderId;
    private static final Angle kBackLeftEncoderOffset = SwerveConstants.modules.BackLeft.kEncoderOffset;
    private static final boolean kBackLeftSteerMotorInverted = SwerveConstants.modules.BackLeft.kSteerMotorInverted;
    private static final Distance kBackLeftXPos = SwerveConstants.modules.BackLeft.kXPos;
    private static final Distance kBackLeftYPos = SwerveConstants.modules.BackLeft.kYPos;

    // Back Right
    private static final int kBackRightDriveMotorId = SwerveConstants.modules.BackRight.kDriveMotorId;
    private static final int kBackRightSteerMotorId = SwerveConstants.modules.BackRight.kSteerMotorId;
    private static final int kBackRightEncoderId = SwerveConstants.modules.BackRight.kEncoderId;
    private static final Angle kBackRightEncoderOffset = SwerveConstants.modules.BackRight.kEncoderOffset;
    private static final boolean kBackRightSteerMotorInverted = SwerveConstants.modules.BackRight.kSteerMotorInverted;
    private static final Distance kBackRightXPos = SwerveConstants.modules.BackRight.kXPos;
    private static final Distance kBackRightYPos = SwerveConstants.modules.BackRight.kYPos;


    public static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset, kFrontLeftXPos, kFrontLeftYPos, kInvertLeftSide, kFrontLeftSteerMotorInverted);
    public static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset, kFrontRightXPos, kFrontRightYPos, kInvertRightSide, kFrontRightSteerMotorInverted);
    public static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset, kBackLeftXPos, kBackLeftYPos, kInvertLeftSide, kBackLeftSteerMotorInverted);
    public static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset, kBackRightXPos, kBackRightYPos, kInvertRightSide, kBackRightSteerMotorInverted);

    /**
     * Creates a CommandSwerveDrivetrain instance.
     * This should only be called once in your robot program,.
     */
    public static CommandSwerveDrivetrain createDrivetrain() {
        return new CommandSwerveDrivetrain(
            DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight
        );
    }
}
